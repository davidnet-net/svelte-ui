import fs from "fs";
import path from "path";

const devDir = "./themes/dev";
const genDir = "./themes/gen";

// Ensure the output directory exists
fs.mkdirSync(genDir, { recursive: true });

function flattenTokens(obj, prefix = []) {
	const tokens = {};

	for (const key in obj) {
		const value = obj[key];
		const newPrefix = [...prefix, key];

		if (typeof value === "object" && value !== null) {
			Object.assign(tokens, flattenTokens(value, newPrefix));
		} else {
			const cssVar = `--token-${newPrefix.join("-")}`;
			tokens[cssVar] = value;
		}
	}

	return tokens;
}

// Step 1: Delete all existing .css files in ./themes/gen
for (const file of fs.readdirSync(genDir)) {
	if (file.endsWith(".css")) {
		fs.unlinkSync(path.join(genDir, file));
	}
}

// Step 2: Convert each .json file in ./themes/dev to .css in ./themes/gen
for (const file of fs.readdirSync(devDir)) {
	if (!file.endsWith(".json")) continue;

	const name = path.basename(file, ".json");
	const jsonPath = path.join(devDir, file);
	const cssPath = path.join(genDir, `${name}.css`);

	const json = JSON.parse(fs.readFileSync(jsonPath, "utf8"));
	const tokens = flattenTokens(json);

	let css = `/* This file is autogenerated. Edit in themes/dev/${name}.json */\n\n`;
	css += `:root {\n`;
	for (const [key, value] of Object.entries(tokens)) {
		css += `  ${key}: ${value};\n`;
	}
	css += `}\n`;

	fs.writeFileSync(cssPath, css);
	console.log(`âœ… Generated ${cssPath}`);
}
